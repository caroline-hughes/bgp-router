
BGP Router is a hardware box with bunch of high speed jacks on it (ports). Each port has diff ip 

The routers job is to 
(1) keep its forwarding table up-to-date, based on the BGP protocol messages it gets from its neighbors, 
(2) help keep its neighbors' forwarding tables up to date, by sending BGP protocol messages to them, and 
(3) make a best-effort attempt to forward data packets to their correct destination.



Provided is a simple implementation of a router that simply connects to its peers, sends a handshake message, and prints out every other message it receives. 



/config holds the tests they’ll run on us, using ./run script

COMMAND LINE SPEC
$ ./run [config-file]



./3700router is the router script we write:
When executed, it will
1. Open several UDP sockets, each corr to one “port” on router
    1. Yes, multiple open sockets at once
2. Receive msgs on these sockets (ports), each being
    1. BGP command from a neighbor, or
    2. A data packet u have to forward to dest

"The simulator will take care of setting up the UDP sockets, running your program, and closing your program at the end of each simulation.”

Instead of real packet formats, well send json 

Requirements:
1. Accept route updates from bgp neighbors
    1. Forward them as appropriate
2. Accept route revocation (?) msgs from bgp neighbors
    1. Forward as appropriate
3. Forward data packets correctly
4. Return error msgs when packet cant be delivered
5. **** Coalesce forwarding table entries from networks that are adjacent and on same port 
6. **** Serialize your routing table cache so it can be checked for correctness 


Command Line Spec for our script
                <portNum-IPwithdotsInIt-peer|prov|cust>
./router <asn> <port-ip.add.re.ss-[peer,prov,cust]> [port-ip.add.re.ss-[peer,prov,cust]] ...[port-ip.add.re.ss-[peer,prov,cust]]


takes one argument: the AS number for your router

then 1 or more arguments representing the “ports” that connect to its neighboring routers. 
For each port, the respective command line argument informs your router 
  (1) what UDP port you should use to communicate with the neighboring router, 
  (2) what IP address of the neighboring router on this port, and 
  (3) the type of relationship your router has with this neighboring router: peer, provider, or customer


eg --> ./router 7 7833-1.2.3.2-cust 2374-192.168.0.2-peer 1293-67.32.9.2-prov
  This tells us your router:

  - is part of AS 7.
  - has three ports, connected to three neighboring routers. 
      - will need to open three UDP sockets to ports 7833, 2374, and 1293, respectively. (the sim does this tho??)
  - IP of neighbor router on the first port is 1.2.3.2 --> the IP your router should use on this port is 1.2.3.1 (NEIGHBOR ALWAYS ENDS IN 2, URS ENDS IN 1)
  - The first neighbor belongs to a BGP customer. The second neighbor is a BGP peer. The third neighbor is a BGP provider.

one UDP socket per neighbor
must be constantly reading from all sockets


To handle multiple sockets, use event-driven style using select() or poll() , as opposed to 1 thread for each socket


JSON MSG FORMAT:
{
  "src":  "<source IP>",
  "dst":  "<destination IP>",
  "type": "<update|withdraw|data|no route|dump|table|handshake>",                   
  "msg":  {...}
}


how to interpret src and dest depends on type...


> type = handshake: when router starts up, need to send to all neighbors, ie
  {
  "src":  "1.2.3.1",
  "dst":  "1.2.3.2",
  "type": "handshake",                   
  "msg":  {}
}

> type = update: route annoucements from neighbors
  1. save the accounement in case need later
  2. update ur table
  3. potench send update to neighbors

  {
  "src":  "<source IP>",        # Example: 172.65.0.2
  "dst":  "<destination IP>",   # Example: 172.65.0.1  Notice the final one, this will typically be the IP address of your router
  "type": "update",                   
  "msg": 
  {
    "network":    "<network prefix>",           # Example: 12.0.0.0
    "netmask":    "<associated subnet netmask>",# Example: 255.0.0.0
    "localpref":  "<integer>",                  # Example: 100
    "selfOrigin": "<true|false>",
    "ASPath":     "{<nid>, [nid], ...}",        # Examples: [1] or [3, 4] or [1, 4, 3]
    "origin":     "<IGP|EGP|UNK>",                    
  }
}

the final four items of msg help for breaking ties

u need to store all the msg info in ur table, then decide whether to send an "update" msg to others, depending on the src and who ur neighbors are...
rules:
  Update received from a customer: send updates to all other neighbors
  Update received from a peer or a provider: only send updates to your customers


** When you send a copy of your route annoucnement to a neighbor, you should not include any of the “private” 
fields (localpref, selfOrigin, or origin)... only (network, netmask, and ASPath).


type = "withdraw" is a revocation. taking back an annoucement.
similarly to update, mustYour router must 
1. save a copy of the revocation in case need later
2. remove the dead entry from the forwarding table
3. maybe send copies of the revocation to other neighbors. 

{
  "src":  "<source IP>",        # Example: 172.65.0.2
  "dst":  "<destination IP>",   # Example: 172.65.0.1
  "type": "withdraw",                   
  "msg": 
  [
    {"network": "<network prefix>", "netmask": "<associated subnet mask>"},   <--- LIST! of networks to be removed from table
    {"network": "<network prefix>", "netmask": "<associated subnet mask>"},
    ...
  ]
}


type="data": the actual packets! here, you dont care about contents of msg. u just forward it along
{
  "src":  "<source IP>",        # Example: 134.0.88.77  <-- not you or a neighbor!
  "dst":  "<destination IP>",   # Example: 12.4.66.13   <-- not you or a neighbor!
  "type": "data",                   
  "msg":  "<some data>"
}

your job is to determine:

(1) which route (if any) in the forwarding table is the best route to use for the given destination IP
  - none? send type="no route"

  - one? send there 

  - multiple table rows that match with with diff dest IPS? --> use longest prefix match
     - possible your forwarding table will include multiple destination networks that all match the destination of the data packet
        - suppose your forwarding table contains two entries: 172.0.0.0/8 and 172.128.0.0/9. These two ranges overlap. 
            - now suppose a data message arrives with destination IP 172.128.88.99: which of the two entries should you choose? 
                - The answer is the longest prefix match, which in this case would be 172.128.0.0/9, since it has a 9-bit netmask, 
                versus 172.0.0.0/8 which only has an 8-bit netmask.

table:
172.0.0.0/8  -> network and netmask
172.128.0.0/9

172.128.88.99

  - multiple with exact same IPs? --> do tie break stuff



(2) whether the data packet is being forwarded legally: depends on relationships:
   - If source or destination is a customer, forward
   - If the source is a peer or a provider, and destination is a peer or a provider, then drop the data message. (send type="no route")


type="dump" is for them to check the state of our tables, not real bgp thing:
 - When your router receives a “dump” message, 
   it must respond with a type=“table” message that contains a copy of the current 
   routing announcement cache in your router. 

- in this table message, we send list of the rows in our table 
    - you will need to perform aggregation on these announcements before you send your response...



WHEN TO AGGREGATE?
In practice, aggregation should be triggered after each “update” has been received, i.e to compress the table. 
Note however that “withdraw” messages may require your router to disaggregate its table!


Milestone
For the milestone, your code must pass the 1-1-simple-send.conf and 1-2-simple-send.conf tests, 
which simply requires that it be able to connect to two peers, 
forward route announcements, and construct a simple routing table.