#!/usr/bin/env -S python3 -u

from __future__ import annotations
import argparse, socket, time, json, select, struct, sys, math

class Router:

    relations = {} # map: ip -> relation
    sockets = {} # map: ip -> socket objects
    ports = {} # map: ip -> port

    neighbors = [] # the ips of all our neighbors

    forwardingTable = [] # our list of rows in the fowarding table. always appending.
    allAnnouncements = [] # record of all announcements weve receieved

    def decimalToBinary(n):
    # converting decimal to binary
    # and removing the prefix(0b)
        return bin(n).replace("0b", "")

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.neighbors.append(neighbor)

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # sockets[neigbborsIP] = socket obj
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        # print('\n\n\n\n loPorts: ', self.ports)
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def sendTo(self, msg: str, type: str, toIP: str):
        self.send(toIP, json.dumps({ "type": type, "src": self.our_addr(toIP), "dst": toIP, "msg": msg  }))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))
                self.parseMsg(json.loads(msg), sock)
        return
        
    # take in the json msg object
    def parseMsg(self, announcement, fromNeighbor):
        type = announcement["type"]
        src = announcement["src"]
        dest = announcement["dst"]
        msg = announcement["msg"]

        # received update:
        if type == 'update':
            modifiedASPath = msg["ASPath"]
            modifiedASPath.insert(0, self.asn) # prepend it to the list
            publicMsg = {"network": msg["network"], "netmask": msg["netmask"], "ASPath": modifiedASPath}

            self.allAnnouncements.append(announcement) # append the whole announcement to list
            self.forwardingTable.append(msg) # append the routing information we get to our table
            #print('\n\ndding to FT: ', msg)
            # check who we receieved it from
            recievedFrom = self.relations[src] # one of cust, prov, peer

            # send updates to all other neighbors
            if recievedFrom == "cust":
                self.sendToNeighbors(publicMsg, "update", src)
            else:
                self.sendToNeighbors(publicMsg, "update", src, False)

        if type == 'data':
           # if self.relations[src] != "cust" and self.relations[dest] != "cust":
             #   self.sendTo("{}", "no route", src) # drop the packet
            
            # check which row in routing table works:
            bestRoutes = self.getBestRoute(dest)

            if len(bestRoutes) == 1:
                bestRouteIP = bestRoutes[0]['network']
                if self.isCustomerPacket(src, dest):
                    self.sendTo(msg, "data", bestRouteIP)
                else:
                    self.sendTo("{}", "no route", fromNeighbor)
            elif len(bestRoutes) > 1:
                # TODO: break ties using rules provided, then:
                # if self.customerPacket(src, dest):
                    # self.sendTo(msg, "data", bestRouteIP)
                return
            else:
                self.sendTo("{}", "no route", fromNeighbor)

    # returns true if either the dest or src of the data packet is a cust
    def isCustomerPacket(self, srcIP, dstIP):
        return self.relations[srcIP] == "cust" or self.relations[dstIP] == "cust"

    # returns a binary string representation of the given IP
    def convertToBinary(self, IPstring):
        toBin = lambda n : bin(n).replace("0b", "").zfill(8) # 32 bit value
        quads = list(int(i) for i in IPstring.split('.'))
        return ''.join(list(map(toBin, quads)))

    # returns the array containing the the best route(s)-- 0 or more-- to forward the data packet to,
    # based on an xnor of the masking result and the destination
    def getBestRoute(self, dest):
        destbinary = self.convertToBinary(dest)

        bestRoutes = [] # may end up having 0 or more
        longestMatch = 0

        # go thru each msg in FT, see if network matches, 
        for i, msg in enumerate(self.forwardingTable):

            # perform masking
            networkbinary = self.convertToBinary(msg['network'])
            netmaskbinary = self.convertToBinary(msg['netmask'])
            maskingresult = bin(int(networkbinary, 2) & int(netmaskbinary, 2)).replace("0b", "")

            # xnor netmaskbinary with destbinary
            numMatching = self.prefixMatchLength(destbinary, maskingresult)
            if numMatching > longestMatch:
                longestMatch = numMatching   # new highest match
                bestRoutes = []
                bestRoutes.append(msg)
            if numMatching == longestMatch:  # if matches as much but not more, append
                bestRoutes.append(msg)       # this msg is now the only best

        return bestRoutes

    # uses xnor to determine how many characters the two strings match bits for
    def prefixMatchLength(self, a: str, b: str):
        if len(a) != len(b):
            print('\n\n\nerror in prefixMatchLength, args had diff lengths!\n\n\n')
        res = 0
        for i in range(len(a)):
            if a[i] != b[i]:
                break
            else:
                res = res + 1
        return res

    # forward msgToSend to every relation except for the srcIP (where it came from), and non-customers, if specified by bool
    def sendToNeighbors(self, msg: str, type: str, srcIP: str, everyone = True):
        for n in self.neighbors:
            if n != srcIP and (everyone or self.relations[n] == "cust"):
                self.send(n, json.dumps({ "type": type, "src": self.our_addr(n), "dst": n, "msg": msg  }))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()

