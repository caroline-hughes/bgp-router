#!/usr/bin/env -S python3 -u
import argparse, socket, json, select
from ast import Num
from itertools import combinations

class Router:
    relations = {}
    sockets = {}
    ports = {}

    neighbors = [] 
    forwardingTable = []
    allAnnouncements = []
    aggregatedNetworks = []

    def decimalToBinary(n):
        return bin(n).replace("0b", "")

    def quadsToBinary(self, IPstring):
        toBin = lambda n: bin(n).replace("0b", "").zfill(8)
        quads = list(int(i) for i in IPstring.split('.'))
        return ''.join(list(map(toBin, quads)))

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.neighbors.append(neighbor)

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # sockets[neigbborsIP] = socket obj
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def sendHelper(self, msg: str, type: str, toIP: str, destination: str):
        self.send(toIP, json.dumps({ "type": type, "src": self.our_addr(toIP), "dst": destination, "msg": msg  }))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))
                self.parseMsg(json.loads(msg), sock)

    def checkForAggregation(self):
        if len(self.forwardingTable) < 2:
            return 

        for pair in combinations(self.forwardingTable, 2):

            # aggregated entries must share the same netmask
            if pair[0]['netmask'] == pair[1]['netmask']:
                maskVal = self.maskingValue(self.quadsToBinary(pair[0]['netmask']))
    
                # check for numeric adjacency, same next hop, and matching attributes
                if self.numericallyAdjacent(pair[0], pair[1], maskVal):
                    if pair[0]['peer'] == pair[1]['peer'] and pair[0]['localpref'] == pair[1]['localpref'] and pair[0]['origin'] == pair[1]['origin'] and pair[0]['selfOrigin'] == pair[1]['selfOrigin']:

                        self.aggregatedNetworks.append(pair[0])
                        self.aggregatedNetworks.append(pair[1])

                        # the network for the aggregate entry is the lower network IP
                        if int(self.quadsToBinary(pair[0]['network']), 2) < int(self.quadsToBinary(pair[1]['network']), 2):
                            minNetwork = pair[0]
                        else:
                            minNetwork = pair[1]

                        # the new netmask has one less 1
                        oldMask = self.quadsToBinary(pair[0]['netmask'])
                        newMask = oldMask[:maskVal-1] + "0" + oldMask[maskVal:] 

                        aggregatedMsg = {
                            "network": minNetwork["network"], 
                            "netmask": self.bitsToQuads(newMask), 
                            "localpref": pair[0]['localpref'], 
                            "origin": pair[0]['origin'], 
                            "selfOrigin": pair[0]['selfOrigin'], 
                            "ASPath":  pair[0]['ASPath'], 
                            "peer":  pair[0]['peer']
                        }

                        self.forwardingTable = list(filter(lambda entry: (entry['network'] != pair[0]["network"]) and (entry['network'] != pair[1]["network"]), self.forwardingTable))
                        self.forwardingTable.append(aggregatedMsg)
                        break

    def checkAggCount(self, wasAggregated):
        aggregatedCount = 0
        if len(self.forwardingTable) < 2:
            return 0

        for pair in combinations(self.forwardingTable, 2):

            # aggregated entries must share the same netmask
            if pair[0]['netmask'] == pair[1]['netmask']:
                maskVal = self.maskingValue(self.quadsToBinary(pair[0]['netmask']))

                # check for numeric adjacency, same next hop, and matching attributes
                if self.numericallyAdjacent(pair[0], pair[1], maskVal):

                    if pair[0]['peer'] == pair[1]['peer'] and pair[0]['localpref'] == pair[1]['localpref'] and pair[0][
                        'origin'] == pair[1]['origin'] and pair[0]['selfOrigin'] == pair[1]['selfOrigin']:

                        if pair[0] == wasAggregated or pair[1] == wasAggregated:
                            print('pair0', pair[0])
                            print('pair1', pair[1])
                            print('wasAggregated', wasAggregated)
                            aggregatedCount = aggregatedCount + 1
                        break
        return aggregatedCount

    # get the int representation of the netmask
    def maskingValue(self, mask: str):
        ones = 0
        for bit in mask:
            if bit == "1":
                ones+=1
        return ones

    # turn the four chunk network ip or netmask into a single binary value
    def bitsToQuads(self, mask: str):
        byteLen = 8
        quadsAsBin = [mask[i:i+byteLen] for i in range(0, len(mask), byteLen)]
        quadsAsInts = map(lambda quad: str(int(quad, 2)), quadsAsBin)
        return '.'.join(quadsAsInts)

    # takes in a network ip and number of 1s in the mask, returns the masking result in binary
    def performMasking(self, network: str, maskVal: int):
        networkbinary = self.quadsToBinary(network)
        return networkbinary[:maskVal]

    # checks if message networks are adjacent by comparing lengths after masking
    def numericallyAdjacent(self, aMsg: str, bMsg: str, maskVal: int):
        maskingResA = self.performMasking(aMsg['network'], maskVal)
        maskingResB= self.performMasking(bMsg['network'], maskVal)
        return len(maskingResA) == len(maskingResB)

    # rebuild the forwarding table
    def rebuildTable(self, wasAggregated):
        self.forwardingTable = []
        for announcement in self.allAnnouncements:
            if announcement['type'] == 'update':
                msg = announcement["msg"]
                src = announcement["src"]
                msg['peer'] = src
                self.forwardingTable.append(msg)
                count = self.checkAggCount(wasAggregated)
                if count == 0:
                    self.checkForAggregation()
            if announcement['type'] == 'withdraw':
                for revoked in announcement['msg']:
                    entry = list(filter(lambda i: i['network'] == revoked['network'] and
                                                  i['netmask'] == revoked['netmask'], self.forwardingTable))
                    if entry:
                        self.forwardingTable.remove(entry[0])

    # delegate to functionality specified by message type
    def parseMsg(self, announcement, fromNeighbor):
        type = announcement["type"]
        src = announcement["src"]
        dst = announcement["dst"]
        msg = announcement["msg"]

        # DUMP
        if type == 'dump':
            rows = []
            for msg in self.forwardingTable:
                rows.append(msg)
            self.sendHelper(rows, "table", src, src)

        # UPDATE
        if type == 'update':
            self.allAnnouncements.append(announcement)
            msg['peer'] = src
            self.forwardingTable.append(msg)          
            self.checkForAggregation()

            aspath: list = msg["ASPath"]
            modifiedASPath = aspath.copy()
            modifiedASPath.insert(0, self.asn)        
            publicMsg = {"network": msg["network"], "netmask": msg["netmask"], "ASPath": modifiedASPath}

            # forward updates to neighbors
            if self.relations[src] == "cust":
                self.sendToNeighbors(publicMsg, "update", src)
            else:
                self.sendToNeighbors(publicMsg, "update", src, False)

        # WITHDRAW
        if type == 'withdraw':
            self.allAnnouncements.append(announcement)
            for revoked in msg:
                wasAggregated = list(filter(lambda i: i['network'] == revoked['network'] and i['netmask'] == revoked['netmask']
                                 and i['peer'] == src, self.aggregatedNetworks))
                if wasAggregated:
                    self.rebuildTable(wasAggregated[0])
                else:
                    entry = list(filter(lambda i: i['network'] == revoked['network'] and i['netmask'] == revoked['netmask']
                                 and i['peer'] == src, self.forwardingTable))[0]
                    self.forwardingTable.remove(entry)

            # forward updates to neighbors
            if self.relations[src] == "cust":
                self.sendToNeighbors(msg, "withdraw", src)
            else:
                self.sendToNeighbors(msg, "withdraw", src, False)

        # DATA
        if type == 'data':
            bestRoutes = self.getBestRoute(dst)
            if len(bestRoutes) < 1:     # case: no best route
                self.sendHelper("{}", "no route", fromNeighbor, fromNeighbor)
            else:
                if len(bestRoutes) == 1: # case: single best route
                    bestRouteIP = bestRoutes[0]['peer']
                else:                    # case: multiple best routes
                    bestRouteIP = self.tieWinner(bestRoutes)['peer']
                self.bestRouteSend(fromNeighbor, bestRouteIP, msg, dst)
                

    def bestRouteSend(self, fromNeighbor, bestRouteIP, msg, dst):
        if self.isCustomerPacket(fromNeighbor, bestRouteIP):
            self.sendHelper(msg, "data", bestRouteIP, dst)
        else:
            self.sendHelper("{}", "no route", fromNeighbor, fromNeighbor)

    # use xnor to see how many matching bits between the given binary strings
    def prefixMatchLength(self, destbinary: str, maskingresult: str):
        res = 0
        maxIndex = min(len(maskingresult), len(destbinary))
        for i in range(maxIndex):
            if destbinary[i] != maskingresult[i]:
                break
            else:
                res += 1
        return res

    # check if either the destination or src of the packet is a customer
    def isCustomerPacket(self, srcIP, dstIP):
        return (srcIP in self.relations.keys() and self.relations[srcIP] == "cust") or (dstIP in self.relations.keys() and self.relations[dstIP] == "cust")

    # forward message to every relation except for the source ip (where it came from) and non-customers
    def sendToNeighbors(self, msg: str, type: str, srcIP: str, everyone = True):
        for n in self.neighbors:
            if n != srcIP and (everyone or self.relations[n] == "cust"):
                self.send(n, json.dumps({"type": type, "src": self.our_addr(n), "dst": n, "msg": msg  }))

    # returns the array containing the best route(s) to forward the data packet to
    def getBestRoute(self, dest):
        destbinary = self.quadsToBinary(dest)

        # there will be zero or more best routes
        bestRoutes = [] 
        longestMatch = 0

        for msg in self.forwardingTable:
            networkbinary = self.quadsToBinary(msg['network'])
            netmaskbinary = self.quadsToBinary(msg['netmask'])
            
            maskingresult = format((int(networkbinary, 2) & int(netmaskbinary, 2)), "032b")
            
            numMatching = self.prefixMatchLength(destbinary, maskingresult)
            if numMatching > longestMatch:
                longestMatch = numMatching    # new best match
                bestRoutes = [msg]
            elif numMatching == longestMatch: # equally as good a match
                bestRoutes.append(msg)
        return bestRoutes
    
    # breaks ties between routes with equally matching prefixes to determine best route
    def tieWinner(self, bestRoutes):
        largestLocal = 0
        wonTie = []
        for msg in bestRoutes:
            if msg['localpref'] > largestLocal:
                largestLocal = msg['localpref']
                wonTie = [msg]
            if msg['localpref'] == largestLocal:
                wonTie.append(msg)
        bestRoutes = wonTie
        wonTie = []
        if len(bestRoutes) > 1:
            for msg in bestRoutes:
                if msg['selfOrigin']:
                    wonTie.append(msg)
            if len(wonTie) != 0:
                bestRoutes = wonTie
            wonTie = []
            if len(bestRoutes) > 1:
                shortestAS = len(bestRoutes[0]['ASPath'])
                for msg in bestRoutes:
                    if len(msg['ASPath']) < shortestAS:
                        shortestAS = msg['ASPath']
                        wonTie = [msg]
                    if len(msg['ASPath']) == shortestAS:
                        wonTie.append(msg)
                bestRoutes = wonTie
                wonTie = []
                if len(bestRoutes) > 1:
                    for msg in bestRoutes:
                        if msg['origin'] == 'IGP':
                            wonTie.append(msg)
                    if len(wonTie) == 0:
                        wonTie = []
                        for msg in bestRoutes:
                            if msg['origin'] == 'EGP':
                                wonTie.append(msg)
                        if len(wonTie) == 0:
                            wonTie = bestRoutes
                    bestRoutes = wonTie
                    wonTie = []
                    if len(bestRoutes) > 1:
                        lowestIP = self.quadsToBinary(bestRoutes[0]['network'])
                        lowestIP = int(lowestIP, 2)
                        wonTie = [msg]
                        for msg in bestRoutes:
                            ip = self.quadsToBinary(msg['network'])
                            ip = int(ip, 2)
                            if ip < lowestIP:
                                lowestIP = ip
                                wonTie = [msg]
                        bestRoutes = wonTie
                        return bestRoutes[0]
        if len(bestRoutes) > 0:
            return bestRoutes[0]


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()

